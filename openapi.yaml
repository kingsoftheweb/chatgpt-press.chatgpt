openapi: 3.0.1
info:
  title: ChatGPTPress
  description: A Plugin for managing a WordPress site. You can add, get, remove WP posts and plugins.
  version: 'v1'
servers:
  - url: http://localhost:5003
    description: Local server
paths:
  /login:
    post:
      operationId: loginAuth
      summary: Get the authentication uid from here. User must provide the WordPress site address, so ChatGPT can provide an authorization url to the user to login to the WordPress site and get the uid.
      parameters:
        - name: site
          in: query
          schema:
            type: string
          required: true
          description: ChatGPT must not generate it and must be provided by the user. ChatGPT should save this value and use it in the future for any requests to the WordPress site.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/loginResponse'
  /token:
    post:
      operationId: getToken
      summary: Get the authentication token to request protected URL
      parameters:
        - name: uid
          in: query
          description: the uid you already got
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tokenResponse'
  /posts/{token}:
    post:
      operationId: getPostDetails
      summary: Get the details of specific post by its ID.
      parameters:
        - name: token
          in: path
          schema:
            type: string
          required: true
        - name: postId
          in: query
          description: Get all the information of a single post with specific post ID.
          required: true
          schema:
            type: string
        - name: postType
          in: query
          description: The post type that will need to be retrieved. WordPress uses the term "post type" to refer to different types of content that can be created and stored in the WordPress database. By default, WordPress comes with these post types "Page", "Post" and "Attachment". You can also create your own custom post types. If "postType" is not provided, the default post type will be "post".
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getPostDetailsResponse'

    get:
      operationId: getPosts
      summary: Get list of the requested posts from the WordPress site.
      parameters:
        - in: path
          name: token
          schema:
            type: string
          required: true
          description: This endpoint is protected, and will need that you use the token you already retrieved earlier from the /token endpoint.
        - name: afterDate
          in: query
          description: Get list of posts that were published after a specific date.
          required: false
          schema:
            type: string
        - name: beforeDate
          in: query
          description: Get list of posts that were published before a specific date.
          required: true
          schema:
            type: string
        - name: postType
          in: query
          description: The post type that will need to be retrieved. WordPress uses the term "post type" to refer to different types of content that can be created and stored in the WordPress database. By default, WordPress comes with these post types "Page", "Post" and "Attachment". You can also create your own custom post types. If "postType" is not provided, the default post type will be "post".
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getListResponse'
  /updatePost/{token}:
    post:
      operationId: updatePost
      summary: Update an existed post that already exists in the WordPress site. This can be used to update the title, content, status, or any other information of the post.
      parameters:
        - in: path
          name: token
          schema:
            type: string
          required: true
          description: This endpoint is protected, and will need that you use the token you already retrieved earlier from the /token endpoint.
        - name: title
          in: query
          description: When this is provided, this should be used as the new or the modified/updated title for the post that should replace the old title.
          required: false
          schema:
            type: string
        - name: content
          in: query
          description: When this is provided, this should be used as the new or the modified/updated content for the post that should replace the old content.
          required: false
          schema:
            type: string
        - name: status
          in: query
          description: When this is provided, this should be used as the new or the modified/updated status for the post that should replace the old status. The status can be "publish", "draft", "pending", "private", "future", "trash", or "auto-draft".
          required: false
          schema:
            type: string
        - name: post_id
          in: query
          description: This is the unique ID for the specific post that you want to update. This is required and must be provided.
          required: true
          schema:
            type: number
        - name: postType
          in: query
          description: The post type of the post that you want to update. WordPress uses the term "post type" to refer to different types of content that can be created and stored in the WordPress database. By default, WordPress comes with these post types "Page", "Post" and "Attachment". You can also create your own custom post types. If "postType" is not provided, the default post type will be "post".
          required: true
          schema:
            type: string
        
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updatePostResponse'
  /addPost/{token}:
    post:
      operationId: addPost
      summary: add a new post to wp
      parameters:
      - in: path
        name: token
        schema:
            type: string
        required: true
        description: use the token you already got after login from /token endpoint
      - name: postType
        in: query
        description: type or category of the post
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/addPostData'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/addPostResponse'
  /deletePost/{token}/{postId}:
    post:
      operationId: deletePost
      summary: delete specifc post
      parameters:
        - in: path
          name: postId
          schema:
              type: string
          required: true
          description: specific post id that will be removed
        - in: path
          name: token
          schema:
              type: string
          required: true
          description: use the token you already got after login from /token endpoint
        - name: postType
          in: query
          description: type or category of the post
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deletePostResponse'

components:
  schemas:
    loginResponse:
      type: object
      properties:
        token:
          type: string
          description: The token that will be used in the next requests
    tokenResponse:
      type: object
      properties:
        token:
          type: string
    addPostData:
      type: object
      properties:
        title:
          type: string
          description: Title for the new post that will be added
        content:
          type: string
          description: HTML format post body that will be added as a new post
    updatePostResponse:
      type: object
      properties:
        list:
          type: array
          items:
            postDetails: string
          description: The post has been updated successfully.
    addPostResponse:
      type: object
      properties:
        list:
          type: array
          items:
            postDetails: string
          description: Post details that have been added successfully.
    getListResponse:
      type: object
      properties:
        response:
          type: array
          items:
            post: string
          description: The list of posts.
    getPostDetailsResponse:
      type: object
      properties:
        response:
          type: object
          description: Post details.
    deletePostResponse:
      type: object
      properties:
        description:
          type: object
